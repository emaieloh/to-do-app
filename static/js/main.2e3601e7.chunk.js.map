{"version":3,"sources":["MyContext.js","components/AddTaskForm.js","components/TaskRow.js","components/PendingTasks.js","components/DoneTasks.js","App.js","serviceWorker.js","MyProvider.js","index.js"],"names":["MyContext","createContext","AddTaskForm","addTaskBtn","useContext","inputChangeHandler","input","errorMessage","className","type","value","onChange","onClick","TaskRow","props","deleteBtn","doneBtn","tasks","map","task","status","key","name","id","_id","Fragment","PendingTasks","pendingTasks","filter","length","DoneTasks","doneTasks","App","Boolean","window","location","hostname","match","MyProvider","e","setState","target","newTask","state","axios","post","then","res","data","deleteTask","splice","indexOf","delete","doneTask","put","Provider","this","children","React","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2e3601e7.chunk.js","sourcesContent":["import {createContext} from \"react\";\r\n\r\nconst MyContext = createContext();\r\n\r\nexport default MyContext;","import React, {useContext} from \"react\";\r\nimport MyContext from \"../MyContext\";\r\n\r\nconst AddTaskForm = () => {\r\n\r\n    const {addTaskBtn} = useContext(MyContext);\r\n    const {inputChangeHandler} = useContext(MyContext);\r\n    const {input, errorMessage} = useContext(MyContext);\r\n\r\n    let addTaskBtnHandler = () => {\r\n        addTaskBtn(input)\r\n    }\r\n\r\n    return(\r\n        <div className=\"task-form\">\r\n            <div>Task Name</div>\r\n            <input type=\"text\" value={input} onChange={inputChangeHandler}/><br/>\r\n            <span><small>{errorMessage}</small></span><br/>\r\n            <button type=\"button\" onClick={addTaskBtnHandler}>Add Task</button>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default AddTaskForm;","import React, {useContext} from \"react\";\r\nimport MyContext from \"../MyContext\";\r\n\r\nconst TaskRow = (props) => {\r\n\r\n    const {deleteBtn} = useContext(MyContext);\r\n    const {doneBtn} = useContext(MyContext);\r\n\r\n    let tasks = props.tasks.map(task => {\r\n        if(task.status === \"pending\") {\r\n            return(\r\n                <tr key={task.name}>\r\n                    <td>\r\n                        {task.name}\r\n                        <button id={task._id} onClick={deleteBtn} className=\"delete-btn\">x</button>\r\n                        <button id={task._id} onClick={doneBtn} className=\"done-btn\">done</button>\r\n                    </td>\r\n                </tr>\r\n            )\r\n        } else {\r\n            return(\r\n                <tr key={task.name}>\r\n                    <td>{task.name}<button id={task._id} onClick={deleteBtn} className=\"delete-btn\">x</button></td>\r\n                </tr>\r\n            )\r\n        }\r\n    })\r\n\r\n    return(\r\n        <React.Fragment>\r\n            {tasks}\r\n        </React.Fragment>\r\n    );\r\n\r\n}\r\n\r\nexport default TaskRow;","import React, {useContext} from \"react\";\r\nimport MyContext from \"../MyContext\";\r\nimport TaskRow from \"./TaskRow\";\r\n\r\nconst PendingTasks = () => {\r\n\r\n    const {tasks} = useContext(MyContext);\r\n\r\n    let pendingTasks = tasks.filter(task => {\r\n        return task.status === \"pending\";\r\n    })\r\n\r\n    return(\r\n        <React.Fragment>\r\n            {\r\n                pendingTasks.length === 0 ? \r\n                <div className=\"no-pending\">No Pending Tasks</div> : \r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Pending Tasks</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <TaskRow tasks={pendingTasks}/>\r\n                    </tbody>\r\n                </table>\r\n            }\r\n        </React.Fragment>\r\n    )\r\n\r\n}\r\n\r\nexport default PendingTasks;","import React, {useContext} from \"react\";\r\nimport MyContext from \"../MyContext\";\r\nimport TaskRow from \"./TaskRow\";\r\n\r\nconst DoneTasks = () => {\r\n\r\n    const {tasks} = useContext(MyContext);\r\n\r\n    let doneTasks = tasks.filter(task => {\r\n        return task.status === \"done\"\r\n      })\r\n\r\n    return(\r\n        <React.Fragment>\r\n            {\r\n                doneTasks.length === 0 ? \r\n                <div className=\"no-done\">No Done Tasks</div> : \r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Done Tasks</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <TaskRow tasks={doneTasks}/>\r\n                    </tbody>\r\n                </table>\r\n            }\r\n        </React.Fragment>\r\n    )\r\n\r\n}\r\n\r\nexport default DoneTasks;","import React from 'react';\nimport AddTaskForm from \"./components/AddTaskForm\";\nimport PendingTasks from \"./components/PendingTasks\";\nimport DoneTasks from \"./components/DoneTasks\";\nimport './App.css';\n\nconst App = () => {\n\n  return (\n    <div className=\"app-body\">\n      <AddTaskForm/>\n      <PendingTasks/>\n      <DoneTasks/>\n    </div>\n  );\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport MyContext from \"./MyContext\";\r\nimport axios from \"axios\";\r\n\r\nclass MyProvider extends React.Component {\r\n\r\n    inputChangeHandler = (e) => {\r\n        this.setState({\r\n            input: e.target.value\r\n        })\r\n    }\r\n\r\n    addTaskBtn = (task) => {\r\n        let newTask = {\r\n            name: task,\r\n            status: \"pending\"\r\n        }\r\n        if(this.state.input === \"\") {\r\n            this.setState({\r\n                errorMessage: \"This field is required\"\r\n            })\r\n        } else {\r\n            axios.post(\"https://to-do-app-server.herokuapp.com/tasks\", {\r\n                task: newTask\r\n            }).then(res => {\r\n                this.setState({\r\n                    tasks: [...this.state.tasks, res.data],\r\n                    errorMessage: \"\",\r\n                    input: \"\"\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    deleteBtn = (e) => {\r\n        let deleteTask = [...this.state.tasks]\r\n        deleteTask.map(task => {\r\n            if(e.target.id === task._id) {\r\n                deleteTask.splice(deleteTask.indexOf(task), 1);\r\n            }\r\n            return deleteTask\r\n        })\r\n        this.setState({\r\n            tasks: deleteTask\r\n        })\r\n        axios.delete(\"https://to-do-app-server.herokuapp.com/tasks/\" + e.target.id)\r\n    }\r\n\r\n    doneBtn = (e) => {\r\n        let doneTask = [...this.state.tasks]\r\n        doneTask.map(task => {\r\n            if(e.target.id === task._id) {\r\n                task.status = \"done\"\r\n            }\r\n            return doneTask\r\n        })\r\n        axios.put(\"https://to-do-app-server.herokuapp.com/tasks/\" + e.target.id, {\r\n            status: \"done\"\r\n        })\r\n        this.setState({\r\n            tasks: doneTask\r\n        })\r\n    }\r\n\r\n    state = {\r\n        addTaskBtn: this.addTaskBtn,\r\n        inputChangeHandler: this.inputChangeHandler,\r\n        deleteBtn: this.deleteBtn,\r\n        doneBtn: this.doneBtn,\r\n        input: \"\",\r\n        errorMessage: \"\",\r\n        tasks: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios(\"https://to-do-app-server.herokuapp.com/tasks\")\r\n        .then(res => {\r\n            let tasks = res.data;\r\n            this.setState({\r\n                tasks: tasks\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        return(\r\n            <MyContext.Provider value={this.state}>\r\n                {this.props.children}\r\n            </MyContext.Provider>\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default MyProvider;\r\n\r\n\r\n// {\r\n//     name: \"eat\",\r\n//     status: \"pending\",\r\n//     id: uuid()\r\n// },\r\n// {\r\n//     name: \"code\",\r\n//     status: \"pending\",\r\n//     id: uuid()\r\n// },\r\n// {\r\n//     name: \"sleep\",\r\n//     status: \"done\",\r\n//     id: uuid()\r\n// }\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport MyProvider from './MyProvider';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyProvider>\n      <App />\n    </MyProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}